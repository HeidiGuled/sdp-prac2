/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

class AppTest {

@Test
    void testTask2_RemovesFirstCharacter() {
        // Arrange
        List<String> input = Arrays.asList("apple", "banana", "grape");
        List<String> expected = Arrays.asList("pple", "anana", "rape");

        // Act
        List<String> result = SimpleFunctions.Task2(input);

        // Assert
        assertEquals(expected, result);
    }

    @Test
    void testTask2_RemovesEmptyAndSingleCharStrings() {
        // Arrange
        List<String> input = Arrays.asList("x", "", "ok", "a");
        List<String> expected = Arrays.asList("k");

        // Act
        List<String> result = SimpleFunctions.Task2(input);

        // Assert
        assertEquals(expected, result);
    }
    @Test
    public void Task3_testBalancedParentheses(){
        String input = "(()())";
        boolean expected = true;
        boolean actual = SimpleFunctions.Task3(input);
        assertEquals(expected, actual);
    }
    @Test 
    public void task3_testUnbalancedOarentheses(){
        String input = "(()";
        boolean expected = false;
        boolean actual = SimpleFunctions.Task3(input);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSortedList() {
        ArrayList<Integer> sortedList = Arrays.asList(1, 2, 3, 4, 5);
        assertTrue(SimpleFunctions.Task5(sortedList));
    }

    @Test
    void testUnsortedList() {
        ArrayList<Integer> unsortedList = Arrays.asList(5, 3, 2, 4, 1);
        assertFalse(SimpleFunctions.Task5(unsortedList));
    }

    @Test
    void testEmptyList() {
        ArrayList<Integer> emptyList = Arrays.asList();
        assertTrue(SimpleFunctions.Task5.(emptyList)); 
    }

    
    @Test
    public void testTask6BasicRounding() {
        List<Integer> input = Arrays.asList(15, 101, 250, 399);
        List<Integer> expected = Arrays.asList(100, 200, 300, 400);
        List<Integer> result = SimpleFunctions.Task6(input);
        assertEquals(expected, result);
    }
    @Test
    public void testTask6NoRoundingNeeded() {
        List<Integer> input = Arrays.asList(100, 200, 300, 400);
        List<Integer> expected = Arrays.asList(100, 200, 300, 400);
        List<Integer> result = SimpleFunctions.Task6(input);
        assertEquals(expected, result);
    }
    @Test
    public void testTask6EdgeCases() {
        List<Integer> input = Arrays.asList(0, -50, -101, -200);
        List<Integer> expected = Arrays.asList(0, 0, -100, -200);
        List<Integer> result = SimpleFunctions.Task6(input);
        assertEquals(expected, result);
    }
    @Test
    public void testTask6EmptyList() {
        List<Integer> input = Arrays.asList();
        List<Integer> expected = Arrays.asList();
        List<Integer> result = SimpleFunctions.Task6(input);
        assertEquals(expected, result);
    }
    @Test
    public void testTask6LargeNumbers() {
        List<Integer> input = Arrays.asList(999, 1001, 1500);
        List<Integer> expected = Arrays.asList(1000, 1100, 1500);
        List<Integer> result = SimpleFunctions.Task6(input);
        assertEquals(expected, result);
    }

}

